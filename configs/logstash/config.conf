input {
  gelf {
    port => 12201
  }
}

filter {
  grok {
    match => {
      "message" => '\[%{WORD:log_level}\] %{DATA}%{SPACE}-%{SPACE}%{DATA}%{SPACE}(\[AccessLog\]%{SPACE})?\| %{NUMBER:statusCode} \|%{SPACE}%{NUMBER:duration}(m|µ|n|u)?s%{SPACE}\|%{SPACE}%{DATA:ip}%{SPACE}\|%{SPACE}%{WORD:verb}%{SPACE}"?(?<url>[^"]+)"?'
    }
  }

  mutate {
    convert => {
      "statusCode" => "integer"
      "duration" => "float"
    }
  }

  # Cria o campo severity com base no log_level
  mutate {
    add_field => { "severity" => "%{log_level}" }
  }

  mutate {
    gsub => [
      "severity", "INFO", "0",
      "severity", "WARN", "1",
      "severity", "ERROR", "2"
    ]
  }

  # Converte o severity final para inteiro
  mutate {
    convert => { "severity" => "integer" }
  }

  # Remove campos desnecessários (depois de usar log_level)
  mutate {
    remove_field => ["log_level", "message", "host", "path", "sublevel1", "sublevel2", "scope", "context"]
  }
}

output {
  stdout {
    codec => rubydebug
  }

  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "logs-%{+YYYY.MM.dd}"
  }
}
